

name: 0.1.$(Rev:r)

variables:
  #----------------------------------------------------------------------------------------------------------
  # these variables are inline configured in the Pipeline in ADO:
  #  - env_name
  #  - env_sub
  #  - terraform_download_sha
  #  - terraform_version
  #  - agent_pool
  #  - tf_concise_plan
  #----------------------------------------------------------------------------------------------------------
  # they are also set in a variable group -> vg-dap-terraform-<env>
  #   however "- groups:" is not dynamic, it will not support an inline variable.
  #   for example: - groups: vg-dap-terraform-$(env_name) will not resolve.
  #   until Microsoft resolve this we cannot use variable groups to set these variables:
  #   - ${{ if In(variables['env_name'], 'dev', 'qac', 'ppr', 'prd') }}: # <- dynamic group doesn't work
  #     - group: vg-dap-terraform-${{variables.env_name}}
  #----------------------------------------------------------------------------------------------------------
  - name: tf_in_automation # Controlling Terraform output in automation
    value: true
  # - name: env_sub2 # <- dynamic variable, doesn't work
  #   ${{ if In(variables['env_name'], 'dev', 'qac') }}:
  #     value: 'dap-development'
  #   ${{ if In(variables['env_name'], 'ppr', 'prd') }}:
  #     value: 'dap-production'
  - name: env_path
    value: ./data-platform-ai/subscription/$(env_sub)/$(env_name)
  - name: script_path
    value: ./data-platform-ai/pipelines/scripts
  - name: agent_name 
    value: '$(Agent.Name)'

trigger:
  batch: true
  branches:
    include:
      - master
  paths:
    include:
      - data-platform-ai/subscription/$(env_sub)/$(env_name)/*
    exclude:
      - "lock.json"
      - "*.exe"
      - "*.yaml"
      - "*.yml"
      - "*.sh"
      - "*.md"
      - ".gitignore"

stages:
  - stage: TerraformValidateandPlan
    jobs:
      - job: Build
        workspace:
          clean: resources # Delete Build.SourcesDirectory before running a new job => https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml#workspace
        pool: 
          name: $(agent_pool)

        steps:
          - checkout: self
            fetchDepth: 1

          - template: "../templates/terraform-list-runtime-variables.yml" # Output the variable for this execution
          - template: "../templates/terraform-download.yml" # Download terraform executable based on [terraform_version] variable
          - template: "../templates/terraform-azure-login.yml" # Login into Azure using the Service Connection defined in the YAML task
          - template: "../templates/terraform-init.yml" # Run a Terraform Init on the TF_CONFIG_DIRECTORY directory
          - template: "../templates/terraform-validate.yml" # Run a Terraform Validate on the TF_CONFIG_DIRECTORY directory
          - template: "../templates/terraform-plan.yml" # Run Terraform Plan on the TF_CONFIG_DIRECTORY directory
          - template: "../templates/terraform-cleanup-folders.yml" # Clean-Up the folders from the stage

          #----------------------------------------------------------------------------------------------------------  
          # DEPLOY WEB APP SECTION (added below)  
          #----------------------------------------------------------------------------------------------------------  
          - task: UsePythonVersion@0  
            displayName: 'Use Python 3.11'  
            inputs:  
              versionSpec: '3.9'  
          - script: |  
              python -m pip install --upgrade pip  
              pip install -r webapp/requirements.txt  
            displayName: 'Install web app dependencies'  
          - task: ArchiveFiles@2  
            displayName: 'Archive webapp for deployment'  
            inputs:  
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/webapp'  
              includeRootFolder: false  
              archiveType: 'zip'  
              archiveFile: '$(Build.ArtifactStagingDirectory)/webapp.zip'  
              replaceExistingArchive: true  
          - task: AzureWebApp@1  
            displayName: 'Deploy web app to Azure'  
            inputs:  
              azureSubscription: 'sc-dap-ai-terraform-dev'  
              appType: 'webApp'  
              appName: 'webapp-dev-dap-cc-01' # Or use a variable/output from Terraform  
              package: '$(Build.ArtifactStagingDirectory)/webapp.zip'  
          #----------------------------------------------------------------------------------------------------------  
          # END DEPLOY WEB APP SECTION  
          #----------------------------------------------------------------------------------------------------------      
